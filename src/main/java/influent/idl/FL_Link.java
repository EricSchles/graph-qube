/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package influent.idl;  
@SuppressWarnings("all")
/** * The links in the social, financial, communications or other graphs. May represent communication
	 * events, financial transactions or social connections. */
@org.apache.avro.specific.AvroGenerated
public class FL_Link extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FL_Link\",\"namespace\":\"influent.idl\",\"doc\":\"* The links in the social, financial, communications or other graphs. May represent communication\\r\\n\\t * events, financial transactions or social connections.\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an\\r\\n\\t\\t\\texplicit link, or (2) encoded query information that can be used to find a set of associated record\\r\\n\\t\\t\\tnotionally representing an implicit link (e.g. Source&Target&Date&Amount). Must not be used for\\r\\n\\t\\t\\tIDs that aren't globally unique.\"},{\"name\":\"linkTypes\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"null\"],\"doc\":\"link types\",\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"source entity uid\",\"default\":null},{\"name\":\"target\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"target entity uid\",\"default\":null},{\"name\":\"type\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"type\"},{\"name\":\"directed\",\"type\":\"boolean\",\"doc\":\"true if directed, false if undirected\",\"default\":true},{\"name\":\"provenance\",\"type\":[{\"type\":\"record\",\"name\":\"FL_Provenance\",\"doc\":\"* This is a placeholder for future modeling of provenance. It is not a required field in any service calls.\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Placeholder for now. Express provenance as a single URI.\"}]},\"null\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[{\"type\":\"record\",\"name\":\"FL_Uncertainty\",\"doc\":\"* This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.\\r\\n\\t *\\r\\n\\t * CHANGED IN 1.6\",\"fields\":[{\"name\":\"confidence\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express original source confidence as a single number from 0 to 1.\",\"default\":1},{\"name\":\"currency\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.\",\"default\":1}]},\"null\"],\"default\":null},{\"name\":\"properties\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_Property\",\"doc\":\"* Each property on an Entity or Link is a name-value pair, with data type information, as well as optional\\r\\n\\t * provenance. Tags provide a way for the data provider to associate semantic annotations to each property\\r\\n\\t * in terms of the semantics of the application.\\r\\n\\t *\\r\\n\\t * CHANGED IN 1.6\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the field name in the underlying data source\"},{\"name\":\"friendlyText\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"user-friendly short-text for key (displayable)\",\"default\":null},{\"name\":\"range\",\"type\":[{\"type\":\"record\",\"name\":\"FL_SingletonRange\",\"doc\":\"* Single value\\r\\n\\t *\\r\\n\\t * ADDED IN 1.5\",\"fields\":[{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"FL_GeoData\",\"doc\":\"* Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO 3 digit country code\",\"default\":null}]}]},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FL_PropertyType\",\"doc\":\"* Allowed types for Property values.\\r\\n\\t *\\r\\n\\t * CHANGED in 1.9\",\"symbols\":[\"FLOAT\",\"DOUBLE\",\"INTEGER\",\"LONG\",\"BOOLEAN\",\"STRING\",\"IMAGE\",\"DATE\",\"GEO\"]},\"doc\":\"One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO, IMAGE\"}]},{\"type\":\"record\",\"name\":\"FL_ListRange\",\"doc\":\"* List of values\\r\\n\\t *\\r\\n\\t * ADDED IN 1.5\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\"]}},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO\"}]},{\"type\":\"record\",\"name\":\"FL_BoundedRange\",\"doc\":\"* Bounded or unbounded range values\\r\\n\\t *\\r\\n\\t * ADDED IN 1.5\",\"fields\":[{\"name\":\"start\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"null\"],\"doc\":\"start of range, or null if unbounded start\"},{\"name\":\"end\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"null\"],\"doc\":\"end of range, or null if unbounded start\"},{\"name\":\"inclusive\",\"type\":\"boolean\",\"doc\":\"If true, range includes specified endpoint. If false, range is exclusive.\"},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO\"}]},{\"type\":\"record\",\"name\":\"FL_DistributionRange\",\"doc\":\"* Describes a distribution of values.\\r\\n\\t *\\r\\n\\t * ADDED IN 1.6\",\"fields\":[{\"name\":\"distribution\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FL_Frequency\",\"doc\":\"* A frequency or probability element of a distribution.\\r\\n\\t *\\r\\n\\t * ADDED IN 1.6\",\"fields\":[{\"name\":\"range\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"FL_GeoData\",\"FL_ListRange\",\"FL_BoundedRange\"],\"doc\":\"the value range which occurs with some specified frequency\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"frequency as a count, or probability as a value from 0-1.\"}]}}},{\"name\":\"rangeType\",\"type\":{\"type\":\"enum\",\"name\":\"FL_RangeType\",\"doc\":\"* Allowed types for Ranges of values.\\r\\n\\t *\\r\\n\\t * CHANGED IN 1.6\",\"symbols\":[\"SINGLETON\",\"LIST\",\"BOUNDED\",\"DISTRIBUTION\"]},\"doc\":\"Describes how the values in the distribution are summarised\"},{\"name\":\"type\",\"type\":\"FL_PropertyType\",\"doc\":\"The type of value that the distribution describes. One of STRING, INTEGER, FLOAT, DOUBLE, LONG, BOOLEAN, DATE, GEO\"},{\"name\":\"isProbability\",\"type\":\"boolean\",\"doc\":\"True if a probability distribution, false if a frequency distribution\",\"default\":false}]}],\"doc\":\"range of values\",\"default\":null},{\"name\":\"provenance\",\"type\":[\"null\",\"FL_Provenance\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[\"null\",\"FL_Uncertainty\"],\"default\":null},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"FL_PropertyTag\",\"doc\":\"* Tags are defined by the application layer as a taxonomy of user and application concepts,\\r\\n\\t * independent of the data sources. This allows application semantics to be re-used with new\\r\\n\\t * data, with a minimum of new software design and development. Data layer entity types, link\\r\\n\\t * types and properties should be mapped into the list of tags. The application layer must be\\r\\n\\t * able to search by native field name or by tag interchangeably, and properties returned must\\r\\n\\t * contain both native field names as well as tags.\\r\\n\\t *\\r\\n\\t * The list of tags may change as application features evolve, though that will require\\r\\n\\t * collaboration with the data layer providers. Evolving the tag list should not change the\\r\\n\\t * Data Access or Search APIs.\\r\\n\\t *\\r\\n\\t * This is the current list of tags for Properties:\\r\\n\\t *\\r\\n\\t * CHANGED in 1.5:\\r\\n\\t * - CREDIT/DEBIT changed to INFLOWING/OUTFLOWING\\r\\n\\t * - added USD\\r\\n\\t * - added DURATION\\r\\n\\t *\\r\\n\\t * CHANGED in 1.6:\\r\\n\\t * - added ENTITY_TYPE\\r\\n\\t * - added ACCOUNT_OWNER, CLUSTER_SUMMARY, COUNTRY_CODE\\r\\n\\t *\\r\\n\\t * CHANGED in 1.7:\\r\\n\\t * - added CLUSTER\\r\\n\\t *\\r\\n\\t * CHANGED in 1.8:\\r\\n\\t * - added TOPIC\\r\\n\\t *\\r\\n\\t * CHANGED in 1.9:\\r\\n\\t * - added HTML\\r\\n\\t *\\r\\n\\t * CHANGED in 2.0:\\r\\n\\t * - added UNITS\",\"symbols\":[\"ID\",\"TYPE\",\"ENTITY_TYPE\",\"ACCOUNT_OWNER\",\"CLUSTER_SUMMARY\",\"CLUSTER\",\"NAME\",\"LABEL\",\"STAT\",\"TEXT\",\"HTML\",\"TOPIC\",\"STATUS\",\"ANNOTATION\",\"WARNING\",\"LINKED_DATA\",\"GEO\",\"COUNTRY_CODE\",\"DATE\",\"AMOUNT\",\"INFLOWING\",\"OUTFLOWING\",\"COUNT\",\"SERIES\",\"CONSTRUCTED\",\"RAW\",\"UNITS\",\"USD\",\"DURATION\",\"ENTITY\",\"SHARED_IDENTIFIER\"]}},\"doc\":\"one or more tags from the Tag list, used to map this source-specific field into the semantics of applications\"},{\"name\":\"isHidden\",\"type\":\"boolean\",\"doc\":\"true if this property is hidden from the client\",\"default\":false}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an
			explicit link, or (2) encoded query information that can be used to find a set of associated record
			notionally representing an implicit link (e.g. Source&Target&Date&Amount). Must not be used for
			IDs that aren't globally unique. */
   private java.lang.String uid;
  /** link types */
   private java.util.List<java.lang.String> linkTypes;
  /** source entity uid */
   private java.lang.String source;
  /** target entity uid */
   private java.lang.String target;
  /** type */
   private java.lang.String type;
  /** true if directed, false if undirected */
   private boolean directed;
   private influent.idl.FL_Provenance provenance;
   private influent.idl.FL_Uncertainty uncertainty;
   private java.util.List<influent.idl.FL_Property> properties;

  /**
   * Default constructor.
   */
  public FL_Link() {}

  /**
   * All-args constructor.
   */
  public FL_Link(java.lang.String uid, java.util.List<java.lang.String> linkTypes, java.lang.String source, java.lang.String target, java.lang.String type, java.lang.Boolean directed, influent.idl.FL_Provenance provenance, influent.idl.FL_Uncertainty uncertainty, java.util.List<influent.idl.FL_Property> properties) {
    this.uid = uid;
    this.linkTypes = linkTypes;
    this.source = source;
    this.target = target;
    this.type = type;
    this.directed = directed;
    this.provenance = provenance;
    this.uncertainty = uncertainty;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return linkTypes;
    case 2: return source;
    case 3: return target;
    case 4: return type;
    case 5: return directed;
    case 6: return provenance;
    case 7: return uncertainty;
    case 8: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.String)value$; break;
    case 1: linkTypes = (java.util.List<java.lang.String>)value$; break;
    case 2: source = (java.lang.String)value$; break;
    case 3: target = (java.lang.String)value$; break;
    case 4: type = (java.lang.String)value$; break;
    case 5: directed = (java.lang.Boolean)value$; break;
    case 6: provenance = (influent.idl.FL_Provenance)value$; break;
    case 7: uncertainty = (influent.idl.FL_Uncertainty)value$; break;
    case 8: properties = (java.util.List<influent.idl.FL_Property>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an
			explicit link, or (2) encoded query information that can be used to find a set of associated record
			notionally representing an implicit link (e.g. Source&Target&Date&Amount). Must not be used for
			IDs that aren't globally unique.   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an
			explicit link, or (2) encoded query information that can be used to find a set of associated record
			notionally representing an implicit link (e.g. Source&Target&Date&Amount). Must not be used for
			IDs that aren't globally unique.   * @param value the value to set.
   */
  public void setUid(java.lang.String value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'linkTypes' field.
   * link types   */
  public java.util.List<java.lang.String> getLinkTypes() {
    return linkTypes;
  }

  /**
   * Sets the value of the 'linkTypes' field.
   * link types   * @param value the value to set.
   */
  public void setLinkTypes(java.util.List<java.lang.String> value) {
    this.linkTypes = value;
  }

  /**
   * Gets the value of the 'source' field.
   * source entity uid   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * source entity uid   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'target' field.
   * target entity uid   */
  public java.lang.String getTarget() {
    return target;
  }

  /**
   * Sets the value of the 'target' field.
   * target entity uid   * @param value the value to set.
   */
  public void setTarget(java.lang.String value) {
    this.target = value;
  }

  /**
   * Gets the value of the 'type' field.
   * type   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * type   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'directed' field.
   * true if directed, false if undirected   */
  public java.lang.Boolean getDirected() {
    return directed;
  }

  /**
   * Sets the value of the 'directed' field.
   * true if directed, false if undirected   * @param value the value to set.
   */
  public void setDirected(java.lang.Boolean value) {
    this.directed = value;
  }

  /**
   * Gets the value of the 'provenance' field.
   */
  public influent.idl.FL_Provenance getProvenance() {
    return provenance;
  }

  /**
   * Sets the value of the 'provenance' field.
   * @param value the value to set.
   */
  public void setProvenance(influent.idl.FL_Provenance value) {
    this.provenance = value;
  }

  /**
   * Gets the value of the 'uncertainty' field.
   */
  public influent.idl.FL_Uncertainty getUncertainty() {
    return uncertainty;
  }

  /**
   * Sets the value of the 'uncertainty' field.
   * @param value the value to set.
   */
  public void setUncertainty(influent.idl.FL_Uncertainty value) {
    this.uncertainty = value;
  }

  /**
   * Gets the value of the 'properties' field.
   */
  public java.util.List<influent.idl.FL_Property> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.List<influent.idl.FL_Property> value) {
    this.properties = value;
  }

  /** Creates a new FL_Link RecordBuilder */
  public static influent.idl.FL_Link.Builder newBuilder() {
    return new influent.idl.FL_Link.Builder();
  }
  
  /** Creates a new FL_Link RecordBuilder by copying an existing Builder */
  public static influent.idl.FL_Link.Builder newBuilder(influent.idl.FL_Link.Builder other) {
    return new influent.idl.FL_Link.Builder(other);
  }
  
  /** Creates a new FL_Link RecordBuilder by copying an existing FL_Link instance */
  public static influent.idl.FL_Link.Builder newBuilder(influent.idl.FL_Link other) {
    return new influent.idl.FL_Link.Builder(other);
  }
  
  /**
   * RecordBuilder for FL_Link instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FL_Link>
    implements org.apache.avro.data.RecordBuilder<FL_Link> {

    private java.lang.String uid;
    private java.util.List<java.lang.String> linkTypes;
    private java.lang.String source;
    private java.lang.String target;
    private java.lang.String type;
    private boolean directed;
    private influent.idl.FL_Provenance provenance;
    private influent.idl.FL_Uncertainty uncertainty;
    private java.util.List<influent.idl.FL_Property> properties;

    /** Creates a new Builder */
    private Builder() {
      super(influent.idl.FL_Link.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(influent.idl.FL_Link.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing FL_Link instance */
    private Builder(influent.idl.FL_Link other) {
            super(influent.idl.FL_Link.SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkTypes)) {
        this.linkTypes = data().deepCopy(fields()[1].schema(), other.linkTypes);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.target)) {
        this.target = data().deepCopy(fields()[3].schema(), other.target);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.directed)) {
        this.directed = data().deepCopy(fields()[5].schema(), other.directed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.provenance)) {
        this.provenance = data().deepCopy(fields()[6].schema(), other.provenance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.uncertainty)) {
        this.uncertainty = data().deepCopy(fields()[7].schema(), other.uncertainty);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.properties)) {
        this.properties = data().deepCopy(fields()[8].schema(), other.properties);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'uid' field */
    public java.lang.String getUid() {
      return uid;
    }
    
    /** Sets the value of the 'uid' field */
    public influent.idl.FL_Link.Builder setUid(java.lang.String value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uid' field has been set */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uid' field */
    public influent.idl.FL_Link.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'linkTypes' field */
    public java.util.List<java.lang.String> getLinkTypes() {
      return linkTypes;
    }
    
    /** Sets the value of the 'linkTypes' field */
    public influent.idl.FL_Link.Builder setLinkTypes(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.linkTypes = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'linkTypes' field has been set */
    public boolean hasLinkTypes() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'linkTypes' field */
    public influent.idl.FL_Link.Builder clearLinkTypes() {
      linkTypes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.lang.String getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public influent.idl.FL_Link.Builder setSource(java.lang.String value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'source' field */
    public influent.idl.FL_Link.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'target' field */
    public java.lang.String getTarget() {
      return target;
    }
    
    /** Sets the value of the 'target' field */
    public influent.idl.FL_Link.Builder setTarget(java.lang.String value) {
      validate(fields()[3], value);
      this.target = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'target' field has been set */
    public boolean hasTarget() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'target' field */
    public influent.idl.FL_Link.Builder clearTarget() {
      target = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public java.lang.String getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public influent.idl.FL_Link.Builder setType(java.lang.String value) {
      validate(fields()[4], value);
      this.type = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'type' field */
    public influent.idl.FL_Link.Builder clearType() {
      type = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'directed' field */
    public java.lang.Boolean getDirected() {
      return directed;
    }
    
    /** Sets the value of the 'directed' field */
    public influent.idl.FL_Link.Builder setDirected(boolean value) {
      validate(fields()[5], value);
      this.directed = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'directed' field has been set */
    public boolean hasDirected() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'directed' field */
    public influent.idl.FL_Link.Builder clearDirected() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'provenance' field */
    public influent.idl.FL_Provenance getProvenance() {
      return provenance;
    }
    
    /** Sets the value of the 'provenance' field */
    public influent.idl.FL_Link.Builder setProvenance(influent.idl.FL_Provenance value) {
      validate(fields()[6], value);
      this.provenance = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'provenance' field has been set */
    public boolean hasProvenance() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'provenance' field */
    public influent.idl.FL_Link.Builder clearProvenance() {
      provenance = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'uncertainty' field */
    public influent.idl.FL_Uncertainty getUncertainty() {
      return uncertainty;
    }
    
    /** Sets the value of the 'uncertainty' field */
    public influent.idl.FL_Link.Builder setUncertainty(influent.idl.FL_Uncertainty value) {
      validate(fields()[7], value);
      this.uncertainty = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'uncertainty' field has been set */
    public boolean hasUncertainty() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'uncertainty' field */
    public influent.idl.FL_Link.Builder clearUncertainty() {
      uncertainty = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'properties' field */
    public java.util.List<influent.idl.FL_Property> getProperties() {
      return properties;
    }
    
    /** Sets the value of the 'properties' field */
    public influent.idl.FL_Link.Builder setProperties(java.util.List<influent.idl.FL_Property> value) {
      validate(fields()[8], value);
      this.properties = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'properties' field has been set */
    public boolean hasProperties() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'properties' field */
    public influent.idl.FL_Link.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public FL_Link build() {
      try {
        FL_Link record = new FL_Link();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.String) defaultValue(fields()[0]);
        record.linkTypes = fieldSetFlags()[1] ? this.linkTypes : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.String) defaultValue(fields()[2]);
        record.target = fieldSetFlags()[3] ? this.target : (java.lang.String) defaultValue(fields()[3]);
        record.type = fieldSetFlags()[4] ? this.type : (java.lang.String) defaultValue(fields()[4]);
        record.directed = fieldSetFlags()[5] ? this.directed : (java.lang.Boolean) defaultValue(fields()[5]);
        record.provenance = fieldSetFlags()[6] ? this.provenance : (influent.idl.FL_Provenance) defaultValue(fields()[6]);
        record.uncertainty = fieldSetFlags()[7] ? this.uncertainty : (influent.idl.FL_Uncertainty) defaultValue(fields()[7]);
        record.properties = fieldSetFlags()[8] ? this.properties : (java.util.List<influent.idl.FL_Property>) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
